{"version":3,"file":"static/js/9806.6be0812a.chunk.js","mappings":"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","sources":["components/emoji-quiz/main.js","apis/emoji-quiz/index.js","components/emoji-quiz/loading-bar.js","components/tools/timer.js","components/emoji-quiz/game.js","components/emoji-quiz/end.js","views/emoji-quiz/EmojiQuiz.js"],"sourcesContent":["import React from 'react'\r\nimport { CButton, CRow } from '@coreui/react'\r\n\r\nexport const EmojiQuizMainComponent = ({ changeDisplayStatus, changeQuizType }) => {\r\n  const setDisplayStatus = (number, string) => {\r\n    changeDisplayStatus(number)\r\n    changeQuizType(string)\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      이모티콘퀴즈\r\n      <br />\r\n      이모티콘으로만 제목을 설명할테니 자신있느 장르에 도전해보세요.\r\n      <br />\r\n      <br />\r\n      <CRow className=\"m-auto mb-2\">\r\n        <CButton onClick={() => setDisplayStatus(1, '영화')}>영화</CButton>\r\n      </CRow>\r\n      <CRow className=\"m-auto mb-2\">\r\n        <CButton onClick={() => setDisplayStatus(1, '게임')}>게임</CButton>\r\n      </CRow>\r\n      <br />\r\n      이모티콘 퀴즈는 Chat GPT를 활용한 컨텐츠입니다.\r\n    </div>\r\n  )\r\n}\r\n","import axios from 'axios'\r\n\r\nexport async function fetchEmojiQuiz(params) {\r\n  const url = `https://todayapi.click:3001/emoji-quizs/${params.quizType}`\r\n  const res = await axios.get(url)\r\n  return res\r\n}\r\n","import React, { useState, useEffect } from 'react'\r\nimport { Timer } from 'src/components/tools/timer'\r\nimport { CProgress, CProgressBar } from '@coreui/react'\r\n\r\nexport const LoadingBar = ({ time, getLoadingBarTimer }) => {\r\n  let timer\r\n  let [timerColor, setTimerColor] = useState('success')\r\n\r\n  timer = Timer(Number(time))\r\n  const sendTime = (number) => {\r\n    getLoadingBarTimer(number)\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (timer >= 4 && timer < 7) {\r\n      setTimerColor('warning')\r\n    } else if (timer < 4) {\r\n      setTimerColor('danger')\r\n    }\r\n  })\r\n\r\n  sendTime(timer)\r\n  return (\r\n    <CProgress className=\"mb-3\">\r\n      <CProgressBar value={timer * 10} color={timerColor} variant=\"striped\" animated />\r\n      {timer}\r\n    </CProgress>\r\n  )\r\n}\r\n\r\nexport default LoadingBar\r\n","import React, { useState, useEffect } from 'react'\r\n\r\nexport const Timer = (second) => {\r\n  const [count, setCount] = useState(second)\r\n\r\n  useEffect(() => {\r\n    const id = setInterval(() => {\r\n      setCount(count - 1)\r\n    }, 1000)\r\n\r\n    if (count === 0) {\r\n      clearInterval(id)\r\n    }\r\n\r\n    return () => clearInterval(id)\r\n  }, [count])\r\n\r\n  return count\r\n}\r\n","import React, { useState, useEffect } from 'react'\r\nimport { fetchEmojiQuiz } from 'src/apis/emoji-quiz'\r\nimport { useAsync } from 'react-async'\r\nimport { CButton, CCol, CRow, CContainer } from '@coreui/react'\r\nimport { LoadingBar } from 'src/components/emoji-quiz/loading-bar'\r\n\r\nexport const GetEmojiQuiz = (params) => {\r\n  const { data, error, isLoading } = useAsync({\r\n    promiseFn: fetchEmojiQuiz,\r\n    quizType: params.quizType,\r\n    watch: params.score,\r\n  })\r\n  if (isLoading) return 'Loading...'\r\n  if (error) return `Something went wrong: ${error.message}`\r\n  if (data) {\r\n    return data.data\r\n  }\r\n}\r\n\r\nexport const EmojiQuizGameComponent = ({ changeDisplayStatus, quizType }) => {\r\n  let [quizNumber, setQuizNumber] = useState(1)\r\n  let [hint1Visable, setHint1Visable] = useState(false)\r\n  let [hint2Visable, setHint2Visable] = useState(false)\r\n  let [hint3Visable, setHint3Visable] = useState(false)\r\n\r\n  const setDisplayStatus = (number) => {\r\n    changeDisplayStatus(number)\r\n  }\r\n\r\n  const getLoadingBarTimer = (time) => {\r\n    time === 0 && setDisplayStatus(2)\r\n    time === 10 && setHint1Visable(true)\r\n    time === 7 && setHint2Visable(true)\r\n    time === 3 && setHint3Visable(true)\r\n  }\r\n\r\n  useEffect(() => {\r\n    setHint1Visable(false)\r\n    setHint2Visable(false)\r\n    setHint3Visable(false)\r\n  }, [quizNumber])\r\n\r\n  const [score, setScore] = useState(0)\r\n  let { answer, emojis, genre, hint, hintDetail, quizQuestionList } = GetEmojiQuiz({\r\n    quizType: quizType,\r\n    score,\r\n  })\r\n  let quizList = []\r\n\r\n  if (quizQuestionList) {\r\n    for (const quiz of quizQuestionList) {\r\n      quizList.push(\r\n        <CRow className=\"mb-2\">\r\n          <CButton\r\n            onClick={() => {\r\n              if (answer === quiz) {\r\n                setScore(score + 1)\r\n                setQuizNumber(quizNumber + 1)\r\n              } else {\r\n                setDisplayStatus(2)\r\n              }\r\n            }}\r\n          >\r\n            {quiz}\r\n          </CButton>\r\n        </CRow>,\r\n      )\r\n    }\r\n  }\r\n\r\n  return (\r\n    <CContainer>\r\n      <CRow className=\"m-auto mb-4\">\r\n        <CCol className=\"text-right m-auto\">\r\n          <strong>점수 : {score}</strong>\r\n        </CCol>\r\n      </CRow>\r\n      <CRow className=\"m-auto mb-4\">\r\n        <CCol className=\"text-center\">\r\n          <strong>\r\n            {quizNumber}. 다음 이모지는 무슨 {quizType} 일까요?\r\n          </strong>\r\n          <h1>{emojis}</h1>\r\n        </CCol>\r\n      </CRow>\r\n      <CRow className=\"m-auto mb-2\">\r\n        <CCol className=\"col-12\">{quizList}</CCol>\r\n      </CRow>\r\n      <CRow className=\"m-auto mb-4\">\r\n        <CCol>\r\n          <LoadingBar time=\"10\" key={score} getLoadingBarTimer={getLoadingBarTimer} />\r\n        </CCol>\r\n      </CRow>\r\n      <CRow className=\"m-auto mb-4\">{hint1Visable ? <CCol>{genre}</CCol> : null}</CRow>\r\n      <CRow className=\"m-auto mb-4\">{hint2Visable ? <CCol>{hint}</CCol> : null}</CRow>\r\n      <CRow className=\"m-auto mb-4\">{hint3Visable ? <CCol>{hintDetail}</CCol> : null}</CRow>\r\n    </CContainer>\r\n  )\r\n}\r\n\r\nexport default EmojiQuizGameComponent\r\n","import React, { useState, useEffect } from 'react'\r\nimport { fetchEmojiQuiz } from 'src/apis/emoji-quiz'\r\nimport { useAsync } from 'react-async'\r\nimport {\r\n  CButton,\r\n  CCard,\r\n  CCardBody,\r\n  CCollapse,\r\n  CCardHeader,\r\n  CCol,\r\n  CRow,\r\n  CProgress,\r\n  CProgressBar,\r\n  CContainer,\r\n} from '@coreui/react'\r\nimport { Timer } from '../tools/timer'\r\n\r\nexport const EmojiQuizEndComponent = ({ changeDisplayStatus }) => {\r\n  const setDisplayStatus = (number) => {\r\n    {\r\n      changeDisplayStatus(number)\r\n    }\r\n  }\r\n\r\n  const isResultDisplay = (\r\n    <div>\r\n      틀렸습니다~\r\n      <CButton onClick={() => setDisplayStatus(0)}>처음부터</CButton>\r\n    </div>\r\n  )\r\n\r\n  return isResultDisplay\r\n}\r\n","import React, { useState, useEffect } from 'react'\r\nimport { fetchEmojiQuiz } from 'src/apis/emoji-quiz'\r\nimport { useAsync } from 'react-async'\r\nimport {\r\n  CButton,\r\n  CCard,\r\n  CCardBody,\r\n  CCollapse,\r\n  CCardHeader,\r\n  CCol,\r\n  CRow,\r\n  CProgress,\r\n  CProgressBar,\r\n  CContainer,\r\n} from '@coreui/react'\r\nimport { EmojiQuizMainComponent } from 'src/components/emoji-quiz/main'\r\nimport { EmojiQuizGameComponent } from 'src/components/emoji-quiz/game'\r\nimport { EmojiQuizEndComponent } from 'src/components/emoji-quiz/end'\r\n\r\nexport const EmojiQuiz = () => {\r\n  const [displayStatus, setDisplayStatus] = useState(0)\r\n  const [quizType, setQuizType] = useState('')\r\n\r\n  const changeDisplayStatus = (number) => {\r\n    setDisplayStatus(number)\r\n  }\r\n\r\n  const changeQuizType = (quizType) => {\r\n    setQuizType(quizType)\r\n  }\r\n\r\n  return (\r\n    <CContainer>\r\n      {displayStatus === 0 && (\r\n        <EmojiQuizMainComponent\r\n          changeDisplayStatus={changeDisplayStatus}\r\n          changeQuizType={changeQuizType}\r\n        />\r\n      )}\r\n      {displayStatus === 1 && (\r\n        <EmojiQuizGameComponent changeDisplayStatus={changeDisplayStatus} quizType={quizType} />\r\n      )}\r\n      {displayStatus === 2 && <EmojiQuizEndComponent changeDisplayStatus={changeDisplayStatus} />}\r\n    </CContainer>\r\n  )\r\n}\r\n\r\nexport default EmojiQuiz\r\n"],"names":["EmojiQuizMainComponent","_ref","changeDisplayStatus","changeQuizType","setDisplayStatus","number","string","_jsxs","children","_jsx","CRow","className","CButton","onClick","fetchEmojiQuiz","_x","_fetchEmojiQuiz","apply","arguments","_asyncToGenerator","_regeneratorRuntime","mark","_callee","params","url","res","wrap","_context","prev","next","concat","quizType","axios","sent","abrupt","stop","LoadingBar","timer","time","getLoadingBarTimer","_useState","useState","_useState2","_slicedToArray","timerColor","setTimerColor","second","count","setCount","useEffect","id","setInterval","clearInterval","Timer","Number","CProgress","CProgressBar","value","color","variant","animated","EmojiQuizGameComponent","quizNumber","setQuizNumber","_useState3","_useState4","hint1Visable","setHint1Visable","_useState5","_useState6","hint2Visable","setHint2Visable","_useState7","_useState8","hint3Visable","setHint3Visable","_useState9","_useState10","score","setScore","_GetEmojiQuiz","_useAsync","useAsync","promiseFn","watch","data","error","isLoading","message","GetEmojiQuiz","answer","emojis","genre","hint","hintDetail","quizQuestionList","quizList","_step","_iterator","_createForOfIteratorHelper","_loop","quiz","push","s","n","done","err","e","f","CContainer","CCol","EmojiQuizEndComponent","EmojiQuiz","displayStatus","setQuizType"],"sourceRoot":""}